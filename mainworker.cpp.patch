--- org/main/mainworker.cpp	2020-06-07 14:47:57.833369112 +0200
+++ mod/main/mainworker.cpp	2020-06-07 15:43:31.169464045 +0200
@@ -8954,6 +8954,8 @@
 	gdevice.subtype = sTypeKwh;
 	gdevice.floatval1 = (float)instant;
 	gdevice.floatval2 = (float)total;
+	gdevice.rssi = SignalLevel;
+	gdevice.battery_level = BatteryLevel;
 
 	int voltage = 230;
 	m_sql.GetPreferencesVar("ElectricVoltage", voltage);
@@ -8964,7 +8966,7 @@
 		gdevice.floatval2 *= mval;
 	}
 
-	decode_General(pHardware, (const tRBUF*)&gdevice, procResult, SignalLevel, BatteryLevel);
+	decode_General(pHardware, (const tRBUF*)&gdevice, procResult);
 	procResult.bProcessBatteryValue = false;
 }
 
@@ -9939,7 +9941,7 @@
 	std::string ID = szTmp;
 	uint8_t Unit = pMeter->dunit;
 	uint8_t cmnd = 0;
-	uint8_t SignalLevel = 12;
+	uint8_t SignalLevel = pMeter->rssi;
 	uint8_t BatteryLevel = 255;
 
 	sprintf(szTmp, "%.1f", pMeter->fusage);
@@ -10064,12 +10066,14 @@
 	procResult.DeviceRowIdx = DevRowIdx;
 }
 
-void MainWorker::decode_General(const CDomoticzHardwareBase* pHardware, const tRBUF* pResponse, _tRxMessageProcessingResult& procResult, const uint8_t SignalLevel, const uint8_t BatteryLevel)
+void MainWorker::decode_General(const CDomoticzHardwareBase* pHardware, const tRBUF* pResponse, _tRxMessageProcessingResult& procResult)
 {
 	char szTmp[200];
 	const _tGeneralDevice* pMeter = reinterpret_cast<const _tGeneralDevice*>(pResponse);
 	uint8_t devType = pMeter->type;
 	uint8_t subType = pMeter->subtype;
+	uint8_t SignalLevel = pMeter->rssi;
+	uint8_t BatteryLevel = pMeter->battery_level;
 
 	if (
 		(subType == sTypeVoltage) ||
@@ -11080,7 +11084,9 @@
 	gdevice.intval1 = (pResponse->SOLAR.id1 * 256) + pResponse->SOLAR.id2;
 	gdevice.id = (uint8_t)gdevice.intval1;
 	gdevice.floatval1 = float((pResponse->SOLAR.solarhigh * 256) + float(pResponse->SOLAR.solarlow)) / 100.f;
-	decode_General(pHardware, pResponse, procResult, SignalLevel, BatteryLevel);
+	gdevice.rssi = SignalLevel;
+	gdevice.battery_level = BatteryLevel;
+	decode_General(pHardware, pResponse, procResult);
 	procResult.bProcessBatteryValue = false;
 }
 
